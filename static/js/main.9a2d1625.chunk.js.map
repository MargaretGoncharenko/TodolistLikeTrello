{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddItemForm","props","useState","text","setText","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","onchange","autoFocus","onDoubleClick","Todolist","className","title","newTitle","changeTodolistTitle","id","deleteTodolist","Delete","addNewTask","tasks","map","t","checked","deleteTask","Checkbox","changedTaskStatus","changeTaskStatus","newValue","changeTaskTitle","Button","style","height","margin","filter","changeTasksFilter","App","DeleteTask","todolistID","FilteredTasks","tasksObj","setTasks","AddNewTask","AllTasks","v1","ChangeTasksFilter","todolist","Todolists","find","tl","setTodolists","taskID","changedStatus","task","todolist1ID","todolist2ID","DeleteTodolist","FilteredTodolists","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","todolist_ID","newTodolist","spacing","tasksForTodolist","item","Paper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUASaA,EAAc,SAACC,GAA6B,IAAD,EAC5BC,mBAAS,IADmB,mBAC7CC,EAD6C,KACvCC,EADuC,OAE1BF,mBAAwB,MAFE,mBAE7CG,EAF6C,KAEtCC,EAFsC,KAG9CC,EAAU,WACQ,KAAhBJ,EAAKK,QACLP,EAAMM,QAAQJ,GACdC,EAAQ,KAERE,EAAS,sBAYjB,OACI,gCACI,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACRL,QAASA,EACTM,MAAOR,EACPS,SAdU,SAACC,GAC1BT,EAAQS,EAAEC,cAAcH,QAcTI,WAZO,SAACF,GACvBP,EAAS,MACU,KAAfO,EAAEG,UACFT,KAUWU,MAAM,QACNC,WAAYb,IAEvB,cAACc,EAAA,EAAD,CAAYC,MAAM,UACNC,QAASd,EADrB,SAEI,cAACe,EAAA,EAAD,UClCHC,EAAe,SAACtB,GAA8B,IAAD,EACtBC,oBAAS,GADa,mBAC/CsB,EAD+C,KACrCC,EADqC,OAE9BvB,mBAAS,IAFqB,mBAE/CC,EAF+C,KAEzCC,EAFyC,KAYtD,OACIoB,EACM,uBAAOb,MAAOR,EACPuB,OARQ,WACrBD,GAAY,GACZxB,EAAM0B,SAASxB,IAOFS,SALO,SAACC,GAAD,OAAsCT,EAAQS,EAAEC,cAAcH,QAMrEiB,WAAS,IAChB,sBAAMC,cAfS,WACrBJ,GAAY,GACZrB,EAAQH,EAAME,OAaR,SAAwCF,EAAME,Q,2BCF/C2B,EAAW,SAAC7B,GAmBrB,OACI,sBAAK8B,UAAU,WAAf,UACI,sBAAKA,UAAU,QAAf,UACI,cAAC,EAAD,CAAc5B,KAAMF,EAAM+B,MAAOL,SANf,SAACM,GAC3BhC,EAAMiC,oBAAoBD,EAAUhC,EAAMkC,OAMlC,cAAChB,EAAA,EAAD,CAAYE,QAbM,WAC1BpB,EAAMmC,eAAenC,EAAMkC,KAYnB,SAA4C,cAACE,EAAA,EAAD,SAEhD,cAAC,EAAD,CAAa9B,QAZL,SAACyB,GACb/B,EAAMqC,WAAWN,EAAO/B,EAAMkC,OAY1B,8BAEQlC,EAAMsC,MAAMC,KAAI,SAAAC,GASZ,OACI,sBAAgBV,UAAWU,EAAEC,QAAU,SAAW,GAAlD,UACI,cAACvB,EAAA,EAAD,CAAYE,QAVW,kBAAMpB,EAAM0C,WAAWF,EAAEN,GAAIlC,EAAMkC,KAU1D,SAA+C,cAACE,EAAA,EAAD,MAC/C,cAACO,EAAA,EAAD,CAAUxB,MAAM,UAAUR,SAVA,SAACC,GAC/B,IAAIgC,EAAoBhC,EAAEC,cAAc4B,QACxCzC,EAAM6C,iBAAiBL,EAAEN,GAAIU,EAAmB5C,EAAMkC,KASxCO,QAASD,EAAEC,UACrB,cAAC,EAAD,CAAcvC,KAAMsC,EAAEtC,KAAMwB,SARH,SAACoB,GAC9B9C,EAAM+C,gBAAgBP,EAAEN,GAAIY,EAAU9C,EAAMkC,SAGlCM,EAAEN,SAS5B,cAACc,EAAA,EAAD,CACIC,MAAO,CACH9B,MAAO,aACP+B,OAAQ,OACRC,OAAQ,YAEZ1C,QAA0B,QAAjBT,EAAMoD,OAAmB,WAAa,OAC/ChC,QArDoB,WAC5BpB,EAAMqD,kBAAkB,MAAOrD,EAAMkC,KA6CjC,iBAWA,cAACc,EAAA,EAAD,CACIC,MAAO,CACH9B,MAAO,QACP+B,OAAQ,OACRC,OAAQ,YAEZ1C,QAA0B,WAAjBT,EAAMoD,OAAsB,WAAa,OAClDhC,QA7DuB,WAC/BpB,EAAMqD,kBAAkB,SAAUrD,EAAMkC,KAqDpC,oBAWA,cAACc,EAAA,EAAD,CACIC,MAAO,CAEH9B,MAAO,SACP+B,OAAQ,OACRC,OAAQ,YAEZ1C,QAA0B,cAAjBT,EAAMoD,OAAyB,WAAa,OACrDhC,QAtE0B,WAClCpB,EAAMqD,kBAAkB,YAAarD,EAAMkC,KA6DvC,2B,8DC8DGoB,MArIf,WAAgB,IAAD,EACLC,EAAa,SAACrB,EAAYsB,GAC5B,IACMC,EADMC,EAASF,GACOJ,QAAO,SAAAZ,GAAC,OAAIA,EAAEN,KAAOA,KACjDwB,EAASF,GAAcC,EACvBE,EAAS,eAAID,KAEXE,EAAa,SAAC1D,EAAcsD,GAC9B,IAAIlB,EAAQoB,EAASF,GAEfK,EAAQ,CADE,CAAC3B,GAAI4B,eAAM5D,KAAMA,EAAMuC,SAAS,IAClC,mBAAgBH,IAC9BoB,EAASF,GAAcK,EACvBF,EAAS,eAAID,KAEXK,EAAoB,SAACrD,EAAmB8C,GAC1C,IAAIQ,EAAWC,EAAUC,MAAK,SAAAC,GAAE,OAAIA,EAAGjC,IAAMsB,KACzCQ,IACAA,EAASZ,OAAS1C,EAClB0D,EAAa,YAAIH,MAGnBpB,EAAmB,SAACwB,EAAgBC,EAAwBd,GAC9D,IACIe,EADQb,EAASF,GACJU,MAAK,SAAA1B,GAAC,OAAIA,EAAEN,IAAMmC,KAC/BE,IACAA,EAAK9B,QAAU6B,EACfX,EAAS,eAAID,MAGfc,EAAcV,eACdW,EAAcX,eA9BT,EA+BuB7D,mBAAgC,CAC9D,CAACiC,GAAIsC,EAAazC,MAAO,gBAAiBqB,OAAQ,OAClD,CAAClB,GAAIuC,EAAa1C,MAAO,cAAeqB,OAAQ,SAjCzC,mBA+BJa,EA/BI,KA+BOG,EA/BP,OAmCkBnE,oBAAQ,mBAChCuE,EAAc,CACX,CAACtC,GAAI4B,eAAM5D,KAAM,OAAQuC,SAAS,GAClC,CAACP,GAAI4B,eAAM5D,KAAM,MAAOuC,SAAS,GACjC,CAACP,GAAI4B,eAAM5D,KAAM,QAASuC,SAAS,GACnC,CAACP,GAAI4B,eAAM5D,KAAM,cAAeuC,SAAS,KALZ,cAOhCgC,EAAc,CACX,CAACvC,GAAI4B,eAAM5D,KAAM,OAAQuC,SAAS,GAClC,CAACP,GAAI4B,eAAM5D,KAAM,QAASuC,SAAS,KATN,IAnC1B,mBAmCJiB,EAnCI,KAmCMC,EAnCN,KA+CLe,EAAiB,SAAClB,GACpB,IAAImB,EAAoBV,EAAUb,QAAO,SAAAe,GAAE,OAAIA,EAAGjC,IAAMsB,KACxDY,EAAaO,UACNjB,EAASF,GAChBG,EAAS,eAAID,KAYXX,EAAkB,SAACsB,EAAgBvB,EAAkBU,GACvD,IACIe,EADQb,EAASF,GACJU,MAAK,SAAA1B,GAAC,OAAIA,EAAEN,IAAMmC,KAC/BE,IACAA,EAAKrE,KAAO4C,EACZa,EAAS,eAAID,MAGfzB,EAAsB,SAACD,EAAkBwB,GAC3C,IAAIQ,EAAWC,EAAUC,MAAK,SAAAC,GAAE,OAAIA,EAAGjC,IAAMsB,KACzCQ,IACAA,EAASjC,MAAQC,EACjBoC,EAAa,YAAIH,MAGzB,OACI,sBAAKnC,UAAU,WAAf,UACI,cAAC8C,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAAC5D,EAAA,EAAD,CAAY6D,KAAK,QAAQ5D,MAAM,UAAU6D,aAAW,OAApD,SACI,cAACC,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAYzE,QAAQ,KAApB,kBAGA,cAACuC,EAAA,EAAD,CAAQ7B,MAAM,UAAd,wBAGR,eAACgE,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACrC,MAAO,CAACsC,QAAS,QAAjC,SACI,cAAC,EAAD,CAAajF,QAxCT,SAACyB,GACjB,IAAMyD,EAAc1B,eACd2B,EAA8B,CAChCvD,GAAIsD,EACJzD,QACAqB,OAAQ,OAEZgB,EAAa,GAAD,mBAAKH,GAAL,CAAgBwB,KAC5B9B,EAAS,2BAAID,GAAL,kBAAgB8B,EAAc,WAkC9B,cAACH,EAAA,EAAD,CAAMC,WAAS,EAACI,QAAS,EAAzB,SAEQzB,EAAU1B,KAAI,SAAA4B,GACV,IAAIwB,EAAmBjC,EAASS,EAAGjC,IAOnC,MANkB,WAAdiC,EAAGf,SACHuC,EAAmBA,EAAiBvC,QAAO,SAAAZ,GAAC,OAAKA,EAAEC,YAErC,cAAd0B,EAAGf,SACHuC,EAAmBA,EAAiBvC,QAAO,SAAAZ,GAAC,OAAIA,EAAEC,YAGlD,cAAC4C,EAAA,EAAD,CAAMO,MAAI,EAAV,SACI,cAACC,EAAA,EAAD,CAAO5C,MAAO,CAACsC,QAAS,QAAxB,SACI,cAAC,EAAD,CAEIrD,GAAIiC,EAAGjC,GACPH,MAAOoC,EAAGpC,MACVO,MAAOqD,EACPjD,WAAYa,EACZlB,WAAYuB,EACZP,kBAAmBU,EACnBlB,iBAAkBA,EAClBO,OAAQe,EAAGf,OACXjB,eAAgBuC,EAChB3B,gBAAiBA,EACjBd,oBAAqBA,GAXhBkC,EAAGjC,oBCpHrC4D,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9a2d1625.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport \"./App.css\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormProps = {\r\n    addItem: (title: string) => void\r\n}\r\nexport const AddItemForm = (props: AddItemFormProps) => {\r\n    const [text, setText] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n    const addItem = () => {\r\n        if (text.trim() !== \"\") {\r\n            props.addItem(text);\r\n            setText(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField variant=\"outlined\"\r\n                       error={!!error}\r\n                       value={text}\r\n                       onChange={onChangeInputHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n            />\r\n            <IconButton color=\"primary\"\r\n                        onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanProps = {\r\n    text: string\r\n    onchange: (newValue: string) => void\r\n\r\n}\r\nexport const EditableSpan = (props: EditableSpanProps) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [text, setText] = useState(\"\")\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setText(props.text)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onchange(text);\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setText(e.currentTarget.value)\r\n    return (\r\n        editMode\r\n            ? <input value={text}\r\n                     onBlur={activateViewMode}\r\n                     onChange={onChangeHandler}\r\n                     autoFocus/>\r\n            : <span onDoubleClick={activateEditMode}>{props.text}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport \"./Todolist.css\";\r\nimport {filterType, tasksType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\n\r\ntype TodolistProps = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<tasksType>\r\n    deleteTask: (id: string, todolistID: string) => void\r\n    addNewTask: (text: string, todolistID: string) => void\r\n    changeTasksFilter: (value: filterType, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, changedStatus: boolean, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, newValue: string, todolistID: string) => void\r\n    filter: filterType\r\n    deleteTodolist: (id: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistID: string) => void\r\n\r\n}\r\nexport const Todolist = (props: TodolistProps) => {\r\n    const onAllFilterClickHandler = () => {\r\n        props.changeTasksFilter(\"all\", props.id)\r\n    }\r\n    const onActiveFilterClickHandler = () => {\r\n        props.changeTasksFilter(\"active\", props.id)\r\n    }\r\n    const onCompletedFilterClickHandler = () => {\r\n        props.changeTasksFilter(\"completed\", props.id)\r\n    }\r\n    const onClickDeleteTodolist = () => {\r\n        props.deleteTodolist(props.id)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addNewTask(title, props.id);\r\n    }\r\n    const onchangeTodolistTitle = (newTitle: string) => {\r\n        props.changeTodolistTitle(newTitle, props.id)\r\n    }\r\n    return (\r\n        <div className=\"Todolist\">\r\n            <div className=\"title\">\r\n                <EditableSpan text={props.title} onchange={onchangeTodolistTitle}/>\r\n                <IconButton onClick={onClickDeleteTodolist}><Delete/></IconButton>\r\n            </div>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    props.tasks.map(t => {\r\n                        let onClickDeleteTaskHandler = () => props.deleteTask(t.id, props.id)\r\n                        const onChangeTaskStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            let changedTaskStatus = e.currentTarget.checked;\r\n                            props.changeTaskStatus(t.id, changedTaskStatus, props.id);\r\n                        }\r\n                        const onChangeTaskTitleHandler = (newValue: string) => {\r\n                            props.changeTaskTitle(t.id, newValue, props.id)\r\n                        }\r\n                        return (\r\n                            <div key={t.id} className={t.checked ? \"isDone\" : \"\"}>\r\n                                <IconButton onClick={onClickDeleteTaskHandler}><Delete/></IconButton>\r\n                                <Checkbox color=\"primary\" onChange={onChangeTaskStatusHandler}\r\n                                          checked={t.checked}/>\r\n                                <EditableSpan text={t.text} onchange={onChangeTaskTitleHandler}/>\r\n                            </div>)\r\n                    })\r\n                }\r\n            </div>\r\n            <Button\r\n                style={{\r\n                    color: \"blueviolet\",\r\n                    height: \"25px\",\r\n                    margin: \"10px 5px\",\r\n                }}\r\n                variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                onClick={onAllFilterClickHandler}\r\n            >\r\n                all\r\n            </Button>\r\n            <Button\r\n                style={{\r\n                    color: \"green\",\r\n                    height: \"25px\",\r\n                    margin: \"10px 5px\",\r\n                }}\r\n                variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                onClick={onActiveFilterClickHandler}\r\n            >\r\n                active\r\n            </Button>\r\n            <Button\r\n                style={{\r\n\r\n                    color: \"orange\",\r\n                    height: \"25px\",\r\n                    margin: \"10px 5px\",\r\n                }}\r\n                variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                onClick={onCompletedFilterClickHandler}\r\n            >\r\n                completed\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport {v1} from \"uuid\";\r\nimport {Todolist} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type tasksType = {\r\n    id: string\r\n    text: string\r\n    checked: boolean\r\n}\r\nexport type filterType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistsProps = {\r\n    id: string\r\n    title: string\r\n    filter: filterType\r\n}\r\nexport type tasksStateType = {\r\n    [key:string]: Array<tasksType>\r\n}\r\nfunction App() {\r\n    const DeleteTask = (id: string, todolistID: string) => {\r\n        let tasks = tasksObj[todolistID];\r\n        const FilteredTasks = tasks.filter(t => t.id !== id);\r\n        tasksObj[todolistID] = FilteredTasks;\r\n        setTasks({...tasksObj});\r\n    }\r\n    const AddNewTask = (text: string, todolistID: string) => {\r\n        let tasks = tasksObj[todolistID];\r\n        const newTask = {id: v1(), text: text, checked: false};\r\n        const AllTasks = [newTask, ...tasks];\r\n        tasksObj[todolistID] = AllTasks;\r\n        setTasks({...tasksObj})\r\n    }\r\n    const ChangeTasksFilter = (value: filterType, todolistID: string) => {\r\n        let todolist = Todolists.find(tl => tl.id == todolistID);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...Todolists])\r\n        }\r\n    }\r\n    const changeTaskStatus = (taskID: string, changedStatus: boolean, todolistID: string) => {\r\n        let tasks = tasksObj[todolistID];\r\n        let task = tasks.find(t => t.id == taskID);\r\n        if (task) {\r\n            task.checked = changedStatus;\r\n            setTasks({...tasksObj});\r\n        }\r\n    }\r\n    const todolist1ID = v1();\r\n    const todolist2ID = v1();\r\n    const [Todolists, setTodolists] = useState<Array<TodolistsProps>>([\r\n        {id: todolist1ID, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolist2ID, title: \"What to buy\", filter: \"all\"},\r\n    ])\r\n    const [tasksObj, setTasks] = useState<tasksStateType>({\r\n        [todolist1ID]: [\r\n            {id: v1(), text: \"HTML\", checked: true},\r\n            {id: v1(), text: \"CSS\", checked: true},\r\n            {id: v1(), text: \"JS/TS\", checked: false},\r\n            {id: v1(), text: \"REACT/REDUX\", checked: false},\r\n        ],\r\n        [todolist2ID]: [\r\n            {id: v1(), text: \"milk\", checked: false},\r\n            {id: v1(), text: \"bread\", checked: true},\r\n        ]\r\n    })\r\n    const DeleteTodolist = (todolistID: string) => {\r\n        let FilteredTodolists = Todolists.filter(tl => tl.id != todolistID);\r\n        setTodolists(FilteredTodolists);\r\n        delete tasksObj[todolistID];\r\n        setTasks({...tasksObj})\r\n    }\r\n    const addTodolist = (title: string) => {\r\n        const todolist_ID = v1();\r\n        const newTodolist: TodolistsProps = {\r\n            id: todolist_ID,\r\n            title,\r\n            filter: \"all\"\r\n        }\r\n        setTodolists([...Todolists, newTodolist]);\r\n        setTasks({...tasksObj, [todolist_ID]: []})\r\n    }\r\n    const changeTaskTitle = (taskID: string, newValue: string, todolistID: string) => {\r\n        let tasks = tasksObj[todolistID];\r\n        let task = tasks.find(t => t.id == taskID);\r\n        if (task) {\r\n            task.text = newValue;\r\n            setTasks({...tasksObj});\r\n        }\r\n    }\r\n    const changeTodolistTitle = (newTitle: string, todolistID: string) => {\r\n        let todolist = Todolists.find(tl => tl.id == todolistID);\r\n        if (todolist) {\r\n            todolist.title = newTitle;\r\n            setTodolists([...Todolists])\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"Todolist\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        Todolists.map(tl => {\r\n                            let tasksForTodolist = tasksObj[tl.id];\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = tasksForTodolist.filter(t => !t.checked);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = tasksForTodolist.filter(t => t.checked);\r\n                            }\r\n                            return (\r\n                                <Grid item>\r\n                                    <Paper style={{padding: \"10px\"}}>\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksForTodolist}\r\n                                            deleteTask={DeleteTask}\r\n                                            addNewTask={AddNewTask}\r\n                                            changeTasksFilter={ChangeTasksFilter}\r\n                                            changeTaskStatus={changeTaskStatus}\r\n                                            filter={tl.filter}\r\n                                            deleteTodolist={DeleteTodolist}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodolistTitle={changeTodolistTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}